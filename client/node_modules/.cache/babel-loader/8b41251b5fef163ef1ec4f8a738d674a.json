{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { POPULAR_BASE_URL } from '../../config';\nexport const useHomeFetch = searchTerm => {\n  const [state, setState] = useState({\n    movies: []\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const fetchMovies = async endpoint => {\n    setError(false);\n    setLoading(true);\n    const isLoadMore = endpoint.search('page');\n\n    try {\n      const result = await (await fetch(endpoint)).json();\n      console.log(result);\n      setState(prev => ({ ...prev,\n        movies: isLoadMore !== -1 ? [...prev.movies, ...result.results] : [...result.results],\n        heroImage: prev.heroImage || result.results[0],\n        currentPage: result.page,\n        totalPages: result.total_pages\n      }));\n    } catch (error) {\n      setError(true);\n      console.log(error);\n    }\n\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (sessionStorage.homeState) {\n      console.log('Grabbing from session storage');\n      setState(JSON.parse(sessionStorage.homeState));\n      setLoading(false);\n    } else {\n      console.log('grabbing from API');\n      fetchMovies(POPULAR_BASE_URL);\n    }\n  }, []);\n  useEffect(() => {\n    if (!searchTerm) {\n      console.log('writing to session storage');\n      sessionStorage.setItem('homeState', JSON.stringify(state));\n    }\n  }, [searchTerm, state]);\n  return [{\n    state,\n    loading,\n    error\n  }, fetchMovies];\n};","map":{"version":3,"sources":["/Users/amd32653/Desktop/movie-buff/src/components/hooks/useHomeFetch.js"],"names":["useState","useEffect","POPULAR_BASE_URL","useHomeFetch","searchTerm","state","setState","movies","loading","setLoading","error","setError","fetchMovies","endpoint","isLoadMore","search","result","fetch","json","console","log","prev","results","heroImage","currentPage","page","totalPages","total_pages","sessionStorage","homeState","JSON","parse","setItem","stringify"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,cAAjC;AAEA,OAAO,MAAMC,YAAY,GAAIC,UAAD,IAAgB;AAC1C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC;AAAEO,IAAAA,MAAM,EAAE;AAAV,GAAD,CAAlC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMY,WAAW,GAAG,MAAOC,QAAP,IAAoB;AACtCF,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,IAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,UAAMK,UAAU,GAAGD,QAAQ,CAACE,MAAT,CAAgB,MAAhB,CAAnB;;AAEA,QAAI;AACF,YAAMC,MAAM,GAAG,MAAM,CAAC,MAAMC,KAAK,CAACJ,QAAD,CAAZ,EAAwBK,IAAxB,EAArB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACAV,MAAAA,QAAQ,CAAEe,IAAD,KAAW,EAClB,GAAGA,IADe;AAElBd,QAAAA,MAAM,EACJO,UAAU,KAAK,CAAC,CAAhB,GACI,CAAC,GAAGO,IAAI,CAACd,MAAT,EAAiB,GAAGS,MAAM,CAACM,OAA3B,CADJ,GAEI,CAAC,GAAGN,MAAM,CAACM,OAAX,CALY;AAMlBC,QAAAA,SAAS,EAAEF,IAAI,CAACE,SAAL,IAAkBP,MAAM,CAACM,OAAP,CAAe,CAAf,CANX;AAOlBE,QAAAA,WAAW,EAAER,MAAM,CAACS,IAPF;AAQlBC,QAAAA,UAAU,EAAEV,MAAM,CAACW;AARD,OAAX,CAAD,CAAR;AAUD,KAbD,CAaE,OAAOjB,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACAQ,MAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AACD;;AACDD,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAxBD;;AA0BAR,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI2B,cAAc,CAACC,SAAnB,EAA8B;AAC5BV,MAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAd,MAAAA,QAAQ,CAACwB,IAAI,CAACC,KAAL,CAAWH,cAAc,CAACC,SAA1B,CAAD,CAAR;AACApB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAJD,MAIO;AACLU,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAR,MAAAA,WAAW,CAACV,gBAAD,CAAX;AACD;AACF,GATQ,EASN,EATM,CAAT;AAWAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACG,UAAL,EAAiB;AACfe,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAQ,MAAAA,cAAc,CAACI,OAAf,CAAuB,WAAvB,EAAoCF,IAAI,CAACG,SAAL,CAAe5B,KAAf,CAApC;AACD;AACF,GALQ,EAKN,CAACD,UAAD,EAAaC,KAAb,CALM,CAAT;AAOA,SAAO,CAAC;AAAEA,IAAAA,KAAF;AAASG,IAAAA,OAAT;AAAkBE,IAAAA;AAAlB,GAAD,EAA4BE,WAA5B,CAAP;AACD,CAlDM","sourcesContent":["import { useState, useEffect } from 'react';\nimport { POPULAR_BASE_URL } from '../../config';\n\nexport const useHomeFetch = (searchTerm) => {\n  const [state, setState] = useState({ movies: [] });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const fetchMovies = async (endpoint) => {\n    setError(false);\n    setLoading(true);\n\n    const isLoadMore = endpoint.search('page');\n\n    try {\n      const result = await (await fetch(endpoint)).json();\n      console.log(result);\n      setState((prev) => ({\n        ...prev,\n        movies:\n          isLoadMore !== -1\n            ? [...prev.movies, ...result.results]\n            : [...result.results],\n        heroImage: prev.heroImage || result.results[0],\n        currentPage: result.page,\n        totalPages: result.total_pages,\n      }));\n    } catch (error) {\n      setError(true);\n      console.log(error);\n    }\n    setLoading(false);\n  };\n\n  useEffect(() => {\n    if (sessionStorage.homeState) {\n      console.log('Grabbing from session storage');\n      setState(JSON.parse(sessionStorage.homeState));\n      setLoading(false);\n    } else {\n      console.log('grabbing from API');\n      fetchMovies(POPULAR_BASE_URL);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!searchTerm) {\n      console.log('writing to session storage');\n      sessionStorage.setItem('homeState', JSON.stringify(state));\n    }\n  }, [searchTerm, state]);\n\n  return [{ state, loading, error }, fetchMovies];\n};\n"]},"metadata":{},"sourceType":"module"}